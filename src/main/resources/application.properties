 # --- Spring Application Settings ---
spring.application.name=ElBuenSabor
server.port=8080

# --- Database (MySQL) Configuration ---
spring.datasource.url=jdbc:mysql://localhost:3306/elbuensabor?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true

# Nombre de usuario y contraseña de MySQL
spring.datasource.username=root
spring.datasource.password=root

# Driver de MySQL
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- JPA & Hibernate Settings ---
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# --- Logging Configuration ---
logging.level.org.hibernate.type.descriptor.sql=TRACE

# --- Swagger/OpenAPI Configuration ---
springdoc.swagger-ui.path=/swagger-ui/index.html
springdoc.api-docs.path=/v3/api-docs
logging.level.org.springdoc=DEBUG
logging.level.org.springdoc.webmvc.api.OpenApiResource=DEBUG
logging.level.org.springdoc.core=DEBUG
springdoc.server.url=https://localhost:8080

# --- Cloudinary Configuration ---
cloudinary.cloud_name=dzzv46qgk
cloudinary.api_key=212845865159334
cloudinary.api_secret=-qofkDmdQ1FgDWsWAXas9BkRXJY

# --- File Upload Limits ---
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

# --- CORS Configuration ---
web.cors.allowed-origins=https://localhost:5173

# --- Auth0 OIDC Client Configuration (Para la autenticación de usuarios desde tu frontend) ---
# Â¡IMPORTANTE! Unificar el issuer-uri al que usas en tus JWTs
spring.security.oauth2.client.provider.auth0.issuer-uri=https://dev-ebs2025.us.auth0.com/
spring.security.oauth2.client.registration.auth0.client-id=oKqa0X9moegL9HAEYX7550VJksM8ygHq
spring.security.oauth2.client.registration.auth0.client-secret=qmYDAVwV-xQDi4TIMIhzmTdmjmu4TJZx14tBHYnEqNz0RJKhX7wjLo_nNnKo7XIm
spring.security.oauth2.client.registration.auth0.scope=openid,profile,email,offline_access
spring.security.oauth2.client.registration.auth0.redirect-uri={baseUrl}/login/oauth2/code/auth0
spring.security.oauth2.client.registration.auth0.client-name=Auth0
auth0.database.connection.id=Username-Password-Authentication

# --- Auth0 Resource Server Configuration (Para validar los tokens JWT que envÃ­a el frontend a tu API) ---
# Este issuer-uri ya es consistente con tu JWT
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-ebs2025.us.auth0.com/
auth0.audience=https://apiback

# --- Auth0 Management API Configuration (Para que tu backend gestione usuarios y roles en Auth0) ---
# Este dominio ya es consistente
auth0.management.domain=https://dev-ebs2025.us.auth0.com/
auth0.management.client-id=cOpUkWqEcRzfBsC9y2g3uycWltzpTXVe
auth0.management.client-secret=YEvZvAw3bJvBWxFdXbY2geWj5Fm4WQi0XjScyGWpvuzh4A3KsJ86QfzqSg4oKzIC

# Mercado Pago
mercadopago.access.token=APP_USR-8874632126629418-061221-e4bf13c779851dabac100c8717517bdf-2496113012
app.frontend.url=https://localhost:5173

# Configuración de logging para webhooks
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG
logging.level.com.example.demo.Domain.Service.MercadoPagoService=INFO
logging.level.com.example.demo.Presentation.Controllers.PagoController=INFO 

# Habilitar HTTPS
server.ssl.enabled=true
server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=julio1234
server.ssl.key-alias=springboot